{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darkh\\\\Documents\\\\thinkful\\\\qualified-assessments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport DurationBar from \"./DurationBar\";\nimport StartStopControl from \"./StartStopControl\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const newTimeRemaining = Math.max(0, prevState.session.timeRemaining - 1);\n  let newSession = { ...prevState.session\n  };\n  newSession.timeRemaining = newTimeRemaining;\n  return { ...prevState,\n    \"session\": newSession\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  var _appState$session, _appState$session2;\n\n  // Timer starts out paused\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const initialState = {\n    \"focus\": 1500,\n    \"break\": 300,\n    \"session\": null,\n    \"isTimerRunning\": false\n  };\n  const [appState, setAppState] = useState(initialState);\n  /**\n  * Called whenever the play/pause button is clicked.\n  */\n\n  function playPause() {\n    setAppState(currentState => {\n      const isRunning = !currentState.isTimerRunning;\n\n      if (isRunning) {\n        if (currentState.session === null) {\n          let newSession = {};\n          newSession = {\n            label: \"Focusing\",\n            timeRemaining: appState.focus / 60\n          };\n          return { ...appState,\n            \"session\": newSession,\n            \"isTimerRunning\": isRunning\n          };\n        }\n\n        ;\n      }\n\n      return { ...appState,\n        \"isTimerRunning\": isRunning\n      };\n    });\n  } ///////// Function for duration bar time changes\n\n\n  function changeTime(timerName = \"focus\", addTime = true) {\n    let addedTime = 0;\n\n    if (timerName === \"focus\") {\n      addedTime = addTime === true ? appState[timerName] + 300 : appState[timerName] - 300;\n    } else {\n      addedTime = addTime === true ? appState[timerName] + 60 : appState[timerName] - 60;\n    }\n\n    setAppState({ ...appState,\n      [timerName]: addedTime\n    });\n  } /////////\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (appState.session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(appState[\"focus\"], appState[\"break\"]));\n    }\n\n    return setAppState(nextTick);\n  }, appState.isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DurationBar, {\n    changeTime: changeTime,\n    appState: appState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StartStopControl, {\n    appState: appState,\n    playPause: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, (_appState$session = appState.session) === null || _appState$session === void 0 ? void 0 : _appState$session.label, \" for \", appState.focus / 60, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, (_appState$session2 = appState.session) === null || _appState$session2 === void 0 ? void 0 : _appState$session2.timeRemaining, \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/darkh/Documents/thinkful/qualified-assessments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","DurationBar","StartStopControl","nextTick","prevState","newTimeRemaining","Math","max","session","timeRemaining","newSession","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","setSession","initialState","appState","setAppState","playPause","currentState","isRunning","isTimerRunning","focus","changeTime","timerName","addTime","addedTime","Audio","play","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport DurationBar from \"./DurationBar\";\nimport StartStopControl from \"./StartStopControl\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const newTimeRemaining = Math.max(0, prevState.session.timeRemaining - 1);\n  let newSession = {...prevState.session};\n  newSession.timeRemaining = newTimeRemaining;\n  return ({\n    ...prevState, \"session\": newSession\n  });\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  const initialState = {\n    \"focus\": 1500,\n    \"break\": 300,\n    \"session\": null,\n    \"isTimerRunning\": false,\n  };\n\n  const [appState, setAppState] = useState(initialState);\n\n  /**\n * Called whenever the play/pause button is clicked.\n */\n  function playPause() {\n    setAppState((currentState) => {\n      const isRunning = !currentState.isTimerRunning;\n\n      if (isRunning) {\n        if (currentState.session === null) {\n          let newSession = {};\n          newSession = {\n              label: \"Focusing\",\n              timeRemaining: appState.focus / 60,\n          };\n          return {...appState, \"session\" : newSession, \"isTimerRunning\": isRunning};\n        };\n      }\n      return {...appState, \"isTimerRunning\": isRunning};\n    });\n  }\n\n  ///////// Function for duration bar time changes\n  function changeTime(timerName=\"focus\", addTime=true){\n    let addedTime = 0;\n\n    if (timerName === \"focus\"){\n        addedTime = addTime === true ? appState[timerName] + 300 : appState[timerName] - 300;\n    }else{\n        addedTime = addTime === true ? appState[timerName] + 60 : appState[timerName] - 60;\n    }\n\n    setAppState({...appState, [timerName]: addedTime});\n  }\n  /////////\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (appState.session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(appState[\"focus\"], appState[\"break\"]));\n      }\n      return setAppState(nextTick);\n    },\n    appState.isTimerRunning ? 1000 : null\n  );\n\n\n\n  return (\n    <div className=\"pomodoro\">\n      <DurationBar changeTime={changeTime} appState={appState}/>\n      <StartStopControl appState={appState} playPause={playPause}/>\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {appState.session?.label} for {appState.focus/60} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {appState.session?.timeRemaining} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}