{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darkh\\\\Documents\\\\thinkful\\\\qualified-assessments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport DurationBar from \"./DurationBar\";\nimport StartStopControl from \"./StartStopControl\";\nimport TimeDisplay from \"./TimeDisplay\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const newTimeRemaining = prevState.session.timeRemaining - 1;\n  let newSession = { ...prevState.session\n  };\n  newSession.timeRemaining = newTimeRemaining;\n  return { ...prevState,\n    \"session\": newSession\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param currentState\n *    Takes in the current state and returns appropraite \"state session\"\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(currentState) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  if (currentState.session.label === \"Focusing\") {\n    return {\n      label: \"On Break\",\n      timeRemaining: currentState.break\n    };\n  }\n\n  return {\n    label: \"Focusing\",\n    timeRemaining: currentState.focus\n  };\n}\n\nfunction Pomodoro() {\n  const initialState = {\n    \"focus\": 1500,\n    \"break\": 300,\n    \"session\": null,\n    \"isTimerRunning\": false\n  };\n  const [appState, setAppState] = useState(initialState);\n  /**\n  * Called whenever the play/pause button is clicked.\n  */\n\n  function playPause() {\n    setAppState(currentState => {\n      const isRunning = !currentState.isTimerRunning;\n\n      if (isRunning) {\n        if (currentState.session === null) {\n          let newSession = {};\n          newSession = {\n            label: \"Focusing\",\n            timeRemaining: appState.focus\n          };\n          return { ...appState,\n            \"session\": newSession,\n            \"isTimerRunning\": isRunning\n          };\n        }\n\n        ;\n      }\n\n      return { ...appState,\n        \"isTimerRunning\": isRunning\n      };\n    });\n  }\n  /**\n   * Function to change the time for the Duration Bar\n   * @param timerName \n   *    takes in a param of timer name to update the appropriate timer\n   * @param addTime \n   *    takes in whether to add time to the timer, or decrease the amount of time\n   */\n\n\n  function changeTime(timerName = \"focus\", addTime = true) {\n    let addedTime = 0;\n\n    const addTimeFunc = (currentTime, timeToAdd) => currentTime + timeToAdd;\n\n    const subtractTimeFunc = (currentTime, timeToSubtract) => currentTime - timeToSubtract;\n\n    if (timerName === \"focus\") {\n      addedTime = addTime ? Math.min(addTimeFunc(appState.focus, 300), 3600) : Math.max(subtractTimeFunc(appState.focus, 300), 0);\n    } else {\n      addedTime = addTime ? Math.min(addTimeFunc(appState.break, 60), 900) : Math.max(subtractTimeFunc(appState.break, 60), 0);\n    }\n\n    setAppState({ ...appState,\n      [timerName]: addedTime\n    });\n  } /////////\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (appState.session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setAppState(currentState => {\n        const newSesh = nextSession(currentState);\n        console.log(newSesh);\n        return { ...currentState,\n          \"session\": newSesh\n        };\n      });\n    }\n\n    return setAppState(nextTick);\n  }, appState.isTimerRunning ? 1000 : null);\n  /**\n   * \n   * @returns timer display and progress bar if timer is active with a session\n   */\n\n  function showTimeDisplay() {\n    if (appState.session !== null) {\n      return /*#__PURE__*/React.createElement(TimeDisplay, {\n        appState: appState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 43\n        }\n      });\n    }\n\n    ;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DurationBar, {\n    changeTime: changeTime,\n    appState: appState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StartStopControl, {\n    appState: appState,\n    playPause: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), showTimeDisplay());\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/darkh/Documents/thinkful/qualified-assessments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","DurationBar","StartStopControl","TimeDisplay","nextTick","prevState","newTimeRemaining","session","timeRemaining","newSession","nextSession","currentState","label","break","focus","Pomodoro","initialState","appState","setAppState","playPause","isRunning","isTimerRunning","changeTime","timerName","addTime","addedTime","addTimeFunc","currentTime","timeToAdd","subtractTimeFunc","timeToSubtract","Math","min","max","Audio","play","newSesh","console","log","showTimeDisplay"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport DurationBar from \"./DurationBar\";\nimport StartStopControl from \"./StartStopControl\";\nimport TimeDisplay from \"./TimeDisplay\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const newTimeRemaining = prevState.session.timeRemaining - 1;\n  let newSession = {...prevState.session};\n  newSession.timeRemaining = newTimeRemaining;\n  return {...prevState, \"session\": newSession};\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param currentState\n *    Takes in the current state and returns appropraite \"state session\"\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(currentState) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  if (currentState.session.label === \"Focusing\") {\n    return {\n      label: \"On Break\",\n      timeRemaining: currentState.break,\n    };\n  }\n  return {\n    label: \"Focusing\",\n    timeRemaining: currentState.focus,\n  };\n}\n\nfunction Pomodoro() {\n  const initialState = {\n    \"focus\": 1500,\n    \"break\": 300,\n    \"session\": null,\n    \"isTimerRunning\": false,\n  };\n\n  const [appState, setAppState] = useState(initialState);\n\n  /**\n * Called whenever the play/pause button is clicked.\n */\n  function playPause() {\n    setAppState((currentState) => {\n      const isRunning = !currentState.isTimerRunning;\n\n      if (isRunning) {\n        if (currentState.session === null) {\n          let newSession = {};\n          newSession = {\n              label: \"Focusing\",\n              timeRemaining: appState.focus,\n          };\n          return {...appState, \"session\" : newSession, \"isTimerRunning\": isRunning};\n        };\n      }\n      return {...appState, \"isTimerRunning\": isRunning};\n    });\n  }\n\n  /**\n   * Function to change the time for the Duration Bar\n   * @param timerName \n   *    takes in a param of timer name to update the appropriate timer\n   * @param addTime \n   *    takes in whether to add time to the timer, or decrease the amount of time\n   */\n  function changeTime(timerName=\"focus\", addTime=true){\n    let addedTime = 0;\n    const addTimeFunc = (currentTime, timeToAdd) => currentTime + timeToAdd;\n    const subtractTimeFunc = (currentTime, timeToSubtract) => currentTime - timeToSubtract;\n\n    if (timerName === \"focus\"){\n      addedTime = addTime ? Math.min(addTimeFunc(appState.focus, 300), 3600) : Math.max(subtractTimeFunc(appState.focus, 300), 0);\n    }else{\n      addedTime = addTime ? Math.min(addTimeFunc(appState.break, 60), 900) : Math.max(subtractTimeFunc(appState.break, 60), 0);\n    }\n    setAppState({...appState, [timerName]: addedTime});\n  }\n  /////////\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (appState.session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setAppState(currentState => {\n          const newSesh = nextSession(currentState);\n\n          console.log(newSesh);\n\n          return {...currentState, \"session\" : newSesh};\n        });\n      }\n      return setAppState(nextTick);\n    },\n    appState.isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * \n   * @returns timer display and progress bar if timer is active with a session\n   */\n  function showTimeDisplay() {\n    if (appState.session !== null){return <TimeDisplay appState={appState} />};\n  } \n\n  return (\n    <div className=\"pomodoro\">\n      <DurationBar changeTime={changeTime} appState={appState}/>\n      <StartStopControl appState={appState} playPause={playPause}/>\n      {showTimeDisplay()}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}