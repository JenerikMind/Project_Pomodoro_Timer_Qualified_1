{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darkh\\\\Documents\\\\thinkful\\\\qualified-assessments\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeDisplay.js\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction TimeDisplay({\n  appState\n}) {\n  var _appState$session2, _appState$session3;\n\n  /**\r\n   * @returns boolean based on session label\r\n   */\n  const isFocusing = () => {\n    var _appState$session;\n\n    return ((_appState$session = appState.session) === null || _appState$session === void 0 ? void 0 : _appState$session.label) === \"Focusing\" ? true : false;\n  };\n  /**\r\n   * @returns the correct time to display for the overall duration\r\n   */\n\n\n  const returnCorrectTime = () => isFocusing() ? secondsToDuration(appState.focus) : secondsToDuration(appState.break);\n  /**\r\n   * @returns the amount of progress based on the values in the state\r\n   */\n\n\n  function progressValue() {\n    const maxTime = isFocusing() ? appState.focus : appState.break;\n    const currentTime = appState.session.timeRemaining;\n    const timeLeft = maxTime - currentTime;\n    const progress = timeLeft / maxTime * 100;\n    return progress;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, (_appState$session2 = appState.session) === null || _appState$session2 === void 0 ? void 0 : _appState$session2.label, \" for \", returnCorrectTime(), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, secondsToDuration((_appState$session3 = appState.session) === null || _appState$session3 === void 0 ? void 0 : _appState$session3.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressValue() // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressValue()}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  })))));\n}\n\nTimeDisplay.propTypes = {\n  appState: PropTypes.object\n};\nexport default TimeDisplay;","map":{"version":3,"sources":["C:/Users/darkh/Documents/thinkful/qualified-assessments/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeDisplay.js"],"names":["React","PropTypes","secondsToDuration","TimeDisplay","appState","isFocusing","session","label","returnCorrectTime","focus","break","progressValue","maxTime","currentTime","timeRemaining","timeLeft","progress","height","width","propTypes","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAgC;AAAA;;AAE5B;AACJ;AACA;AACI,QAAMC,UAAU,GAAG;AAAA;;AAAA,WAAM,sBAAAD,QAAQ,CAACE,OAAT,wEAAkBC,KAAlB,MAA4B,UAA5B,GAAyC,IAAzC,GAAgD,KAAtD;AAAA,GAAnB;AAEA;AACJ;AACA;;;AACI,QAAMC,iBAAiB,GAAG,MAAMH,UAAU,KAAKH,iBAAiB,CAACE,QAAQ,CAACK,KAAV,CAAtB,GAAyCP,iBAAiB,CAACE,QAAQ,CAACM,KAAV,CAApG;AAEA;AACJ;AACA;;;AACI,WAASC,aAAT,GAAwB;AACpB,UAAMC,OAAO,GAAGP,UAAU,KAAKD,QAAQ,CAACK,KAAd,GAAsBL,QAAQ,CAACM,KAAzD;AACA,UAAMG,WAAW,GAAGT,QAAQ,CAACE,OAAT,CAAiBQ,aAArC;AACA,UAAMC,QAAQ,GAAGH,OAAO,GAAGC,WAA3B;AACA,UAAMG,QAAQ,GAAID,QAAQ,GAAGH,OAAZ,GAAuB,GAAxC;AAEA,WAAOI,QAAP;AACH;;AAED,sBACI,uDAEA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACGZ,QAAQ,CAACE,OADZ,uDACG,mBAAkBC,KADrB,WACiCC,iBAAiB,EADlD,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,iBAAiB,uBAACE,QAAQ,CAACE,OAAV,uDAAC,mBAAkBQ,aAAnB,CADpB,eANF,CADF,CAFA,eAcA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEG,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeN,aAAa,EAL9B,CAKkC;AALlC;AAME,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAG,GAAEP,aAAa,EAAG;AAA5B,KANT,CAM2C;AAN3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAdA,CADJ;AA+BH;;AAEDR,WAAW,CAACgB,SAAZ,GAAwB;AACpBf,EAAAA,QAAQ,EAAEH,SAAS,CAACmB;AADA,CAAxB;AAIA,eAAejB,WAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction TimeDisplay({appState}){\r\n\r\n    /**\r\n     * @returns boolean based on session label\r\n     */\r\n    const isFocusing = () => appState.session?.label === \"Focusing\" ? true : false;\r\n\r\n    /**\r\n     * @returns the correct time to display for the overall duration\r\n     */\r\n    const returnCorrectTime = () => isFocusing() ? secondsToDuration(appState.focus) : secondsToDuration(appState.break);\r\n\r\n    /**\r\n     * @returns the amount of progress based on the values in the state\r\n     */\r\n    function progressValue(){\r\n        const maxTime = isFocusing() ? appState.focus : appState.break;\r\n        const currentTime = appState.session.timeRemaining;\r\n        const timeLeft = maxTime - currentTime;\r\n        const progress = (timeLeft / maxTime) * 100;\r\n\r\n        return progress;\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {appState.session?.label} for {returnCorrectTime()} minutes\r\n            </h2>\r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(appState.session?.timeRemaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={progressValue()} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${progressValue()}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nTimeDisplay.propTypes = {\r\n    appState: PropTypes.object,\r\n}\r\n\r\nexport default TimeDisplay;"]},"metadata":{},"sourceType":"module"}